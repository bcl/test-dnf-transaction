#!/usr/bin/python3
#
# Output the package set that would be installed if the packages on the cmdline were installed
#

import os
import sys
import argparse
import shutil
import tempfile

import libdnf5 as dnf5
Priority_RUNTIME = dnf5.conf.Option.Priority_RUNTIME

def setup_argparse():
    parser = argparse.ArgumentParser(description="Output packages DNF has selected")

    # required arguments for image creation
    required = parser.add_argument_group("required arguments")
    required.add_argument("-r", "--release", help="release information", required=True, metavar="STRING")
    required.add_argument("-s", "--source", help="source repository (may be listed multiple times)",
                        metavar="REPOSITORY", action="append", default=[], required=True)
    parser.add_argument("-t", dest="pkg_file", help="Read packages from a Mako template file")
    parser.add_argument("-f", "--find", help="Find the package that pulls in this other package")
    parser.add_argument("--skip-broken", help="Skip broken packages. This is the DNF default.",
                        action="store_true", default=False)
    parser.add_argument("--tempdir", help="Directory to store temporary DNF files")
    parser.add_argument("--proxy", help="Proxy URL to use for DNF")
    parser.add_argument("packages", help="Packages to Install", metavar="STRING", nargs='*', default=[])

    return parser


def get_dbo(tempdir, repositories, releasever, best, proxy=None):
    """ Create a dnf Base object and setup the repositories and installroot

        :param list repositories: List of repositories to use for the installation
        :param string releasever: Release version to pass to dnf

    """
    def sanitize_repo(repo):
        """Convert bare paths to file:/// URIs, and silently reject protocols unhandled by yum"""
        if repo.startswith("/"):
            return "file://{0}".format(repo)
        elif any(repo.startswith(p) for p in ('http://', 'https://', 'ftp://', 'file://')):
            return repo
        else:
            return None

    # sanitize the repository urls, split out .repo files
    repo_urls = filter(None, [sanitize_repo(r) for r in repositories if not r.endswith(".repo")])
    repo_files = list(r for r in repositories if r.endswith(".repo") and os.path.isfile(r))

    cachedir = os.path.join(tempdir, "dnf.cache")
    if not os.path.isdir(cachedir):
        os.mkdir(cachedir)

    logdir = os.path.join(tempdir, "dnf.logs")
    if not os.path.isdir(logdir):
        os.mkdir(logdir)

    installroot = os.path.join(tempdir, "installroot")
    if not os.path.isdir(installroot):
        os.mkdir(installroot)

    dnfbase = dnf5.base.Base()
    conf = dnfbase.get_config()

    print("Use highest NVR package: %s" % best)
    conf.best().set(Priority_RUNTIME, best)

    # setup dirs.
    conf.logdir().set(Priority_RUNTIME, logdir)
    conf.cachedir().set(Priority_RUNTIME, cachedir)

    # Turn off logging to the console
    conf.debuglevel().set(Priority_RUNTIME, 10)
    conf.errorlevel().set(Priority_RUNTIME, 0)
    conf.debug_solver().set(Priority_RUNTIME, True)

## MISSING    conf.releasever = releasever
    conf.installroot().set(Priority_RUNTIME, installroot)
## ALWAYS ADDED??    conf.prepend_installroot('persistdir')

## HAHAHA. ARGH.
##    conf.tsflags.append('nodocs')
    conf.tsflags().set(Priority_RUNTIME, conf.tsflags().get_value() + ("nodocs",))

    if proxy:
        conf.proxy().set(Priority_RUNTIME, proxy)


    # Add .repo files
    if repo_files:
        reposdir = os.path.join(tempdir, "dnf.repos")
        if not os.path.isdir(reposdir):
            os.mkdir(reposdir)
        for r in repo_files:
            shutil.copy2(r, reposdir)
        conf.reposdir().set(Priority_RUNTIME,reposdir)

    # Cannot change config after this
    dnfbase.setup()

    sack = dnfbase.get_repo_sack()

    # add the repositories
    for i, r in enumerate(repo_urls):
        if "SRPM" in r or "srpm" in r:
            print("Skipping source repo: %s" % r)
            continue
        repo_name = "lorax-repo-%d" % i
        repo = sack.create_repo(repo_name)
        conf = repo.get_config()
        conf.baseurl().set(Priority_RUNTIME, r)
        conf.skip_if_unavailable().set(Priority_RUNTIME, False)
        print("Added '%s': %s" % (repo_name, r))

    # Have to call this to add the repos from reposdir
    sack.create_repos_from_reposdir()

    print("Fetching metadata...")
    sack.update_and_load_enabled_repos(False)
    print()

    return dnfbase


def mako_installpkg(pkg_file):
    """ Read a Mako template file and return a list of all the packages
        listed in the installpkg lines.
    """
    packages = []
    with open(pkg_file, "r") as f:
        for line in f.readlines():
            if line.startswith("installpkg"):
                packages += line.split()[1:]

    return packages


def find_package_parent(pkg_name, dbo, packages):
    """ Brute force discovery of what make a specific pkg_name get pulled
        into the transaction.
    """
    package_set = []
    for p in packages:
        package_set += [p]

        goal = dnf5.base.Goal(dbo)
        for pkg in package_set:
            goal.add_rpm_install(pkg)

        print(f"Getting dependencies for: {package_set}")
        trx = goal.resolve()
        print()

        for t in trx.get_transaction_packages():
            pkg = t.get_package()
            if pkg_name in pkg.get_name():
                print(f"FOUND IT! {pkg_name} is pulled in by {p}")
                return

if __name__ == "__main__":
    parser = setup_argparse()
    opts = parser.parse_args()

    tempdir = opts.tempdir or tempfile.mkdtemp(prefix="test-dnf.")
    print("Using tempdir: %s" % tempdir)
    dbo = get_dbo(tempdir, opts.source, opts.release, not opts.skip_broken, opts.proxy)

    packages = opts.packages
    if opts.pkg_file:
        packages += mako_installpkg(opts.pkg_file)

    if len(packages) == 0:
        print("Pass packages on cmdline or via Mako template using -f")
        sys.exit(1)

    # Find what pulls in a specific package
    if opts.find:
        find_package_parent(opts.find, dbo, packages)
        sys.exit(0)

    # info about the packages
    q = dnf5.rpm.PackageQuery(dbo)
    q.filter_name(packages)
    for pkg in q:
            print(pkg.get_nevra())
    print()

    goal = dnf5.base.Goal(dbo)
    # Print all the packages DNF picks
    for pkg in packages:
        print("Adding %s to the transaction" % pkg)
        goal.add_rpm_install(pkg)
    print()

    print("Getting dependencies...")
    trx = goal.resolve()
    print()

    # Print what DNF picked.
    for t in trx.get_transaction_packages():
        print(t.get_package().get_nevra())
